/*
============================================
; Title: composer-datails page.
; Author: Devan Wong
; Date: 23 January 2021
; Description: This is the composer-details.component.ts page
;===========================================
*/
// This page has be autopopulated with ng g c composer-details
import { Component, OnInit } from '@angular/core';
// Import statement for icomposer from composer.interface.ts
import { IComposer } from '../composer.interface';
// Import statement for composerService from composer.service.ts
import { ComposerService } from '../composer.service';
// Import statement for activated route from composer.class.ts
import { ActivatedRoute } from '@angular/router';

// This was autogenerated but its declaring what the component will have.
@Component({
  selector: 'app-composer-details',
  templateUrl: './composer-details.component.html',
  styleUrls: ['./composer-details.component.css']
})
export class ComposerDetailsComponent implements OnInit {
  // Adding the fields
  composerId: number;
  composer: IComposer;
  //Activated route is how to access the values being passed.
  // Added the composer service to use dependency injection [built in angular service]
  constructor(private route: ActivatedRoute, private composerService: ComposerService) {
    // In the body we are going to call the param.map.getfunction to be able to access that value being passed in the parameter or into inside the browser to access that component
    //Imported over the activated route and use it to access the value inside the path of the router file
    //Composer ID is aligned with the :composerId in the app-routing module
    this.composerId = parseInt(this.route.snapshot.paramMap.get('composerId'), 10);
    //Conditional: seeing if the composerId has value
    if (this.composerId) {
      // this.composerService is getting call from the params  and from the imported ComposerService page
      this.composer = this.composerService.getComposer(this.composerId);
    }
   }

  ngOnInit(): void {
  }

}
